import yaml
import requests
import logging
from datetime import datetime, timedelta
from pathlib import Path
import base64

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger("YandexIAMTokenManager")


class YandexIAMTokenManager:
    def __init__(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ç–æ–∫–µ–Ω–æ–≤ —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        –∏–∑ config.yaml –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
        """
        self.oauth_token = None
        self.iam_token = None
        self.expires_at = None
        self.folder_id = None
        self._load_config()

    def _load_config(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ config.yaml –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
            project_root = Path(__file__).parent.parent
            config_path = project_root / 'config.yaml'

            logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑: {config_path}")

            with open(config_path, 'r', encoding='utf-8') as f:
                config = yaml.safe_load(f)

            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
            yandex_config = config.get('yandex_cloud', {})
            self.oauth_token = yandex_config.get('oauth_token')
            self.folder_id = yandex_config.get('folder_id')

            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ –∫–ª—é—á—É 'oauth_token', –ø–æ–ø—Ä–æ–±—É–µ–º 'api_key'
            if not self.oauth_token:
                self.oauth_token = yandex_config.get('api_key')

            if not self.oauth_token:
                raise ValueError("OAuth —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª—é—á 'oauth_token' –∏–ª–∏ 'api_key'")

            if not self.folder_id:
                raise ValueError("Folder ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥–µ")

            logger.info(f"OAuth —Ç–æ–∫–µ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω (–ø–µ—Ä–≤—ã–µ 10 —Å–∏–º–≤–æ–ª–æ–≤): {self.oauth_token[:10]}...")
            logger.info(f"Folder ID: {self.folder_id}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {str(e)}")
            raise

    def get_iam_token(self) -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π IAM-—Ç–æ–∫–µ–Ω
        - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω
        - –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–π –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        """
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–æ–∫–µ–Ω–∞
        if self.iam_token and self.expires_at and datetime.utcnow() < self.expires_at:
            logger.debug("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π IAM-—Ç–æ–∫–µ–Ω")
            return self.iam_token

        logger.info("–ó–∞–ø—Ä–æ—Å –Ω–æ–≤–æ–≥–æ IAM-—Ç–æ–∫–µ–Ω–∞...")
        url = "https://iam.api.cloud.yandex.net/iam/v1/tokens"
        payload = {"yandexPassportOauthToken": self.oauth_token}

        try:
            response = requests.post(url, json=payload, timeout=10)
            response.raise_for_status()

            token_data = response.json()
            self.iam_token = token_data["iamToken"]

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
            if "expiresAt" in token_data:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤—Ä–µ–º–µ–Ω–∏ –≤ –æ–±—ä–µ–∫—Ç datetime
                expires_at_str = token_data["expiresAt"]
                self.expires_at = datetime.fromisoformat(expires_at_str.rstrip('Z'))
            else:
                # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: 12 —á–∞—Å–æ–≤
                self.expires_at = datetime.utcnow() + timedelta(hours=11, minutes=55)

            logger.info(f"IAM-—Ç–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ: {self.expires_at}")
            return self.iam_token

        except requests.exceptions.HTTPError as e:
            logger.error(f"–û—à–∏–±–∫–∞ HTTP {e.response.status_code}: {e.response.text}")
            if e.response.status_code == 401:
                logger.error("‚ùå –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π OAuth-—Ç–æ–∫–µ–Ω")
            raise
        except Exception as e:
            logger.exception("–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞")
            raise

    def test_connection(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ —Å –ø–æ–º–æ—â—å—é —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ Vision API"""
        try:
            token = self.get_iam_token()
            if not token:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å IAM-—Ç–æ–∫–µ–Ω")
                return False

            logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ Vision API...")

            # URL –¥–ª—è Vision API
            vision_url = "https://vision.api.cloud.yandex.net/vision/v1/batchAnalyze"
            headers = {
                "Authorization": f"Bearer {token}",
                "Content-Type": "application/json"
            }

            # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ PNG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (1x1 –ø–∏–∫—Å–µ–ª—å, –ø—Ä–æ–∑—Ä–∞—á–Ω–æ–µ)
            test_image = b"\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00\x01\x00\x00\x00\x01\x08\x02\x00\x00\x00\x90wS\xde\x00\x00\x00\x0cIDAT\x08\xd7c\xf8\x0f\x04\x00\x09\xfb\x03\xfd\x00\x00\x00\x00IEND\xaeB`\x82"
            content = base64.b64encode(test_image).decode('utf-8')

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
            request_body = {
                "folderId": self.folder_id,
                "analyzeSpecs": [{
                    "content": content,
                    "features": [{
                        "type": "TEXT_DETECTION",
                        "textDetectionConfig": {"languageCodes": ["*"]}
                    }],
                    "mimeType": "image/png"
                }]
            }

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
            response = requests.post(vision_url, headers=headers, json=request_body, timeout=10)

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            if response.status_code == 200:
                logger.info("‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É! Vision API –¥–æ—Å—Ç—É–ø–µ–Ω.")
                return True
            elif response.status_code == 400:
                # Bad Request - –≤–æ–∑–º–æ–∂–Ω–æ –∏–∑-–∑–∞ –ø—É—Å—Ç–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –Ω–æ —Ç–æ–∫–µ–Ω —Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç!
                logger.info("‚úÖ –¢–æ–∫–µ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç! Vision API –æ—Ç–≤–µ—Ç–∏–ª –æ—à–∏–±–∫–æ–π 400 (–æ–∂–∏–¥–∞–µ–º–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞. –ö–æ–¥: {response.status_code}")
                logger.error(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text[:500]}")
                return False

        except Exception as e:
            logger.error(f"‚ùå –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–≤–∞–ª–µ–Ω: {str(e)}")
            return False


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞"""
    print("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Yandex IAM Token Manager ===")

    try:
        manager = YandexIAMTokenManager()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        success = manager.test_connection()

        if success:
            print("\n‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ! –¢–æ–∫–µ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
            print(f"IAM-—Ç–æ–∫–µ–Ω: {manager.iam_token[:15]}...")
        else:
            print("\n‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.")

    except Exception as e:
        print(f"\nüî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ config.yaml –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞")


if __name__ == "__main__":
    main()