import cv2
import numpy as np
import pyautogui
from PIL import ImageGrab
import os


class TemplateCapture:
    def __init__(self):
        self.templates = {'npc': [], 'enemy': []}
        self.capture_size = 160
        self.window_name = "WoW Template Capture"

    def _clean_windows(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–∫–Ω–∞"""
        try:
            cv2.destroyWindow("Capture Preview")
            cv2.destroyWindow("Last Template")
        except:
            pass

    def _show_image(self, img, title, timeout=300):
        """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–æ–∫–∞–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        self._clean_windows()
        cv2.namedWindow(title, cv2.WINDOW_NORMAL)
        cv2.imshow(title, img)
        cv2.waitKey(timeout)
        cv2.destroyWindow(title)

    def _capture_template(self, x, y, obj_type):
        try:
            # –ó–∞—Ö–≤–∞—Ç —ç–∫—Ä–∞–Ω–∞
            frame = np.array(ImageGrab.grab())
            frame = cv2.cvtColor(frame, cv2.COLOR_RGB2BGR)

            # –í—ã–¥–µ–ª—è–µ–º –æ–±–ª–∞—Å—Ç—å
            half = self.capture_size // 2
            roi = frame[y - half:y + half, x - half:x + half]

            if roi.size == 0:
                print("‚ö†Ô∏è –û–±—ä–µ–∫—Ç —Å–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–æ –∫ –∫—Ä–∞—é!")
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
            self.templates[obj_type].append(roi)
            print(f"‚úÖ –ó–∞—Ö–≤–∞—á–µ–Ω {obj_type.upper()} (–í—Å–µ–≥–æ: {len(self.templates[obj_type])})")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é
            self._show_image(roi, "Capture Preview")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    def _save_templates(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ —à–∞–±–ª–æ–Ω—ã –≤ –ø–∞–ø–∫—É"""
        try:
            os.makedirs('base', exist_ok=True)

            for name, images in self.templates.items():
                if not images:
                    continue

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –æ–±—Ä–∞–∑—Ü—ã
                for i, img in enumerate(images):
                    cv2.imwrite(f'base/{name}_{i}.png', img)

                # –°–æ–∑–¥–∞–µ–º —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω
                avg_template = np.mean(images, axis=0).astype(np.uint8)
                cv2.imwrite(f'base/{name}_template.png', avg_template)

            print("üíæ –í—Å–µ —à–∞–±–ª–æ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫—É 'base'")
            print(os.listdir('base'))

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}")

    def run(self):
        cv2.namedWindow(self.window_name, cv2.WINDOW_NORMAL)

        try:
            while True:
                # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º
                frame = np.array(ImageGrab.grab())
                frame = cv2.cvtColor(frame, cv2.COLOR_RGB2BGR)

                # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∑–æ–Ω—ã –∑–∞—Ö–≤–∞—Ç–∞
                x, y = pyautogui.position()
                half = self.capture_size // 2
                cv2.rectangle(frame,
                              (x - half, y - half),
                              (x + half, y + half),
                              (0, 255, 0), 2)

                # –ò–Ω—Ñ–æ-—Ç–µ–∫—Å—Ç
                cv2.putText(frame, "n-NPC | e-–í—Ä–∞–≥ | s-–°–æ—Ö—Ä–∞–Ω–∏—Ç—å | q-–í—ã—Ö–æ–¥",
                            (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 255), 2)
                cv2.putText(frame,
                            f"–†–∞–∑–º–µ—Ä: {self.capture_size}px | –û–±—Ä–∞–∑—Ü–æ–≤: {sum(len(v) for v in self.templates.values())}",
                            (10, 60), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 255), 2)

                cv2.imshow(self.window_name, frame)
                key = cv2.waitKey(50) & 0xFF

                if key == ord('q'):
                    break
                elif key == ord('n'):
                    self._capture_template(x, y, 'npc')
                elif key == ord('e'):
                    self._capture_template(x, y, 'enemy')
                elif key == ord('s'):
                    self._save_templates()

        finally:
            cv2.destroyAllWindows()


if __name__ == "__main__":
    print("=== –£—Ç–∏–ª–∏—Ç–∞ –∑–∞—Ö–≤–∞—Ç–∞ —à–∞–±–ª–æ–Ω–æ–≤ ===")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ WoW –∑–∞–ø—É—â–µ–Ω –≤ –æ–∫–æ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ!")
    capture = TemplateCapture()
    capture.run()